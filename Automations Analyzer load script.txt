///$tab Main
SET ThousandSep=',';
SET DecimalSep='.';
SET MoneyThousandSep=',';
SET MoneyDecimalSep='.';
SET MoneyFormat='$ ###0.00;-$ ###0.00';
SET TimeFormat='h:mm:ss TT';
SET DateFormat='M/D/YYYY';
SET TimestampFormat='M/D/YYYY h:mm:ss[.fff] TT';
SET FirstWeekDay=6;
SET BrokenWeeks=1;
SET ReferenceDay=0;
SET FirstMonthOfYear=1;
SET CollationLocale='en-US';
SET CreateSearchIndexOnReload=1;
SET MonthNames='Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec';
SET LongMonthNames='January;February;March;April;May;June;July;August;September;October;November;December';
SET DayNames='Mon;Tue;Wed;Thu;Fri;Sat;Sun';
SET LongDayNames='Monday;Tuesday;Wednesday;Thursday;Friday;Saturday;Sunday';
SET NumericalAbbreviation='3:k;6:M;9:G;12:T;15:P;18:E;21:Z;24:Y;-3:m;-6:Î¼;-9:n;-12:p;-15:f;-18:a;-21:z;-24:y';

///$tab Configuration
TRACE Configuration;

/////////////////////////////////////////// REQUIRED ///////////////////////////////////////////
// IMPORTANT: To run this application, the user must be a "Tenant Admin" and must have an 
// API Key, which requires the "Developer Role" and APIs to be enabled within the tenant.

/* 
1. Fully qualified domain name for your tenant. 
		Example: 'company.us.qlikcloud.com'
*/


LET vu_tenant_fqdn = GetSysAttr('tenantUrl');

/*
2. The name of the REST connection that will be used. You must first create a valid REST connection to any endpoint to Qlik Sense tenant.
		Example: '<Space>:<Connection Name>'
        			Note: ':<Connection Name>' is the relative path which will check for a connection in the current space.
		Example Connection: 
					URL: 			https://<tenant-name>.<region>.qlikcloud.com/api/v1/items
					Header: 		"Authorization"
					Header Value: 	"Bearer <token>"
		For reference on how to connect: 
					https://qlik.dev/tutorials/generate-your-first-api-key
*/
SET vu_rest_connection = 'Monitoring Apps - DEV:REST for Monitoring Apps';


Set vu_qvd_storage_connection = 'lib://DataFiles';
////////////////////////////////////////////////////////////////////////////////////////////////


LET vReloadDiffFromGMTString  = If(vu_GMT_offset=0,'GMT-00:00',
    If(vu_GMT_offset<0,'GMT-' & Right('0' & Replace(vu_GMT_offset,'-',''),2) & ':00',
    If(vu_GMT_offset>0,'GMT+' & Right('0' & vu_GMT_offset,2) & ':00')));

LET vReloadTimeDiffFromGMT = ConvertToLocalTime(Now(1),'$(vReloadDiffFromGMTString)') - GMT();

/*
 (Optional) If you are receiving 404 errors, it is possible that while the app was reloading, someone has deleted an app, so it's metadata can no longer be found.
 You can roll over these errors by setting ErrorMode to 0, without any harm to the app. Set to 0 when it is absolutely necessary and after testing connectivity.
*/
Set ErrorMode=1;
///$tab Variables
//// Calendar Variables
  Let vLast24Hours 		=	Num(TimeStamp(Now(1)-1));
  Let vLast72Hours 		=	Num(TimeStamp(Now(1)-3));
  Let vLast7Days 		=	Num(TimeStamp(Now(1)-7));
  Let vLast30Days	 	=	Num(TimeStamp(Now(1)-30));
  Let vLast60Days 		=	Num(TimeStamp(Now(1)-60));
  Let vLast90Days 		=	Num(TimeStamp(Now(1)-90)); 
  
  // Incremental load
  Set vIncremental 					= 1;  // Incremental load flag -- default = 1 (active). This can be disabled by setting to 0 (why do that?)
  Let app_reload_metadata_qvd 		= '$(output_qvd_name(Consumption_Overview,$(app_version)))';
  Let incremental_qvds_available	= If(Len(FileTime('$(vu_qvd_storage_connection)/AutomationRuns.qvd'))>0,1,0);  // Check to see that incremental QVDs are available
  Let incremental_message 			= If($(incremental_qvds_available)=1,'Incremental QVDs found','No Incremental QVDs found.');
  Trace $(incremental_message);
  Let vLastReloadTime 				= TimeStamp(ReloadTime());

///$tab Automations
LIB CONNECT TO '$(vu_rest_connection)';

SET vParams = 'limit=10000000';

RestConnectorMasterTable:
SQL SELECT 
    "__KEY_root",
    (SELECT 
        "id",
        "ownerId",
        "name",
        "state",
        "description",
        "lastRunStatus",
        "runMode",
        "createdAt",
        "updatedAt",
        "lastRunAt",
        "__FK_data"
    FROM "data" FK "__FK_data")
FROM JSON (wrap on) "root" PK "__KEY_root"
WITH CONNECTION (  
      URL "https://$(vu_tenant_fqdn)/api/v1/automations?$(vParams)"
    );
;

Automation:
LOAD
    [id] as AutomationId,
    [ownerId],
    [name],
    [state],
    [description],
    [lastRunStatus],
    [runMode],
    updatedAt AS updatedAtRAW,
    Timestamp(Timestamp([createdAt]) + $(vReloadTimeDiffFromGMT)) as [createdAt],
    Timestamp(Timestamp([updatedAt]) + $(vReloadTimeDiffFromGMT)) as [updatedAt],
    Timestamp(Timestamp([lastRunAt]) + $(vReloadTimeDiffFromGMT)) as [lastRunAt],
    [__FK_data] AS [__KEY_root]
RESIDENT RestConnectorMasterTable
WHERE NOT IsNull([__FK_data]);
DROP TABLE RestConnectorMasterTable;
    
IF len(FileTime('$(vu_qvd_storage_connection)/AutomationRuns.qvd'))=0 THEN
    For i = 0 to NoOfRows('Automation') - 1
        Let vAutomationId = Peek('AutomationId', i, 'Automation');
        Let vAutomationName = Peek('AutomationName', i, 'Automation'); //LH
        RestConnectorMasterTable:
        Load *,
            '$(vAutomationId)' as AutomationId,
            '$(vAutomationName)' as AutomationName //LH
        ;
        SQL SELECT 
            "__KEY_root",
            (SELECT 
                "id",
                "context",
                "status",
                "title",
                "isTestRun",
                "isArchived",
                "error",
                "startTime",
                "stopTime",
                "scheduledStartTime",
                "createdAt",
                "updatedAt",
                 "__FK_data"
            FROM "data" FK "__FK_data")
        FROM JSON (wrap on) "root" PK "__KEY_root"
    WITH CONNECTION (  
              URL "https://$(vu_tenant_fqdn)/api/v1/automations/$(vAutomationId)/runs?$(vParams)"
              );

    Next i;
    
    AutomationRuns:
    LOAD    
        AutomationId,
        [id] as RunId,
        [context],
        [status],
        [title],
        [isTestRun],
        [isArchived],
        [error],
        updatedAt AS run_updatedAtRAW,
        createdAt AS run_createdAtRAW,
        startTime AS run_startTimeRAW,
        Timestamp(Timestamp([startTime]) + $(vReloadTimeDiffFromGMT)) as [run_startTime],
        Timestamp(Timestamp([stopTime]) + $(vReloadTimeDiffFromGMT)) as [run_stopTime],
        if (Now()-[stopTime] + $(vReloadTimeDiffFromGMT)<=30,'yes','no') as [isLastMonth],
        if (Now()-[stopTime] + $(vReloadTimeDiffFromGMT)<=7,'yes','no') as [isLastWeek],
        //max(stopTime)-min(stopTime) as dataTimeSpan,
        Timestamp(Timestamp([scheduledStartTime]) + $(vReloadTimeDiffFromGMT)) as [run_scheduledStartTime],
        Timestamp(Timestamp([createdAt]) + $(vReloadTimeDiffFromGMT)) as run_createdAt,
        Timestamp(Timestamp([updatedAt]) + $(vReloadTimeDiffFromGMT)) as run_updatedAt,
        [__FK_data] AS [__KEY_root]
    RESIDENT RestConnectorMasterTable
    WHERE NOT IsNull([__FK_data]);
    DROP TABLE RestConnectorMasterTable;
    Drop Field [__KEY_root];
    let i = ;

    STORE AutomationRuns into [$(vu_qvd_storage_connection)/AutomationRuns.qvd] (qvd);

ELSE
	qvdRaw: LOAD*FROM [$(vu_qvd_storage_connection)/AutomationRuns.qvd](qvd);
    If (FieldNumber('run_updatedAtRAW', 'qvdRaw') > 0) Then
		MaxRun_startTime:
        LOAD
            Replace(timestamp(max([run_startTimeRAW]),'YYYY-MM-DD hh:mm:ssZ'),' ','T') AS maxRun_startTime
        RESIDENT qvdRaw; 
    ELSE
    	MaxRun_startTime:
        	LOAD * Inline 
            [maxRun_startTime
              '2000-01-01 00:00:00:00Z'];
	ENDIF
    LET vMaxRun_startTime = Peek('maxRun_startTime',0,'MaxRun_startTime');
      
    DROP TABLE MaxRun_startTime, qvdRaw;

 	Set vParams2 = 'filter=(startTime ge %22$(vMaxRun_startTime)%22 and (status eq %22finished%22 or status eq %22failed%22))&limit=10000000';
    
    For i = 0 to NoOfRows('Automation') - 1
      Let vAutomationId = Peek('AutomationId', i, 'Automation');
      Let vAutomationName = Peek('AutomationName', i, 'Automation'); //LH
      RestConnectorMasterTable:
      Load *,
          '$(vAutomationId)' as AutomationId,
          '$(vAutomationName)' as AutomationName //LH
      ;
      SQL SELECT 
          "__KEY_root",
          (SELECT 
              "id",
              "context",
              "status",
              "title",
              "isTestRun",
              "isArchived",
              "error",
              "startTime",
              "stopTime",
              "scheduledStartTime",
              "createdAt",
              "updatedAt",
               "__FK_data"
          FROM "data" FK "__FK_data")
      FROM JSON (wrap on) "root" PK "__KEY_root"
  WITH CONNECTION (  
            URL "https://$(vu_tenant_fqdn)/api/v1/automations/$(vAutomationId)/runs?$(vParams2)"
            );

    Next i;
    AutomationRuns:
    LOAD    
        AutomationId,
        [id] as RunId,
        [context],
        [status],
        [title],
        [isTestRun],
        [isArchived],
        [error],
        updatedAt AS run_updatedAtRAW,
        createdAt AS run_createdAtRAW,
        startTime AS run_startTimeRAW,
        Timestamp(Timestamp([startTime]) + $(vReloadTimeDiffFromGMT)) as [run_startTime],
        Timestamp(Timestamp([stopTime]) + $(vReloadTimeDiffFromGMT)) as [run_stopTime],
        if (Now()-[stopTime] + $(vReloadTimeDiffFromGMT)<=30,'yes','no') as [isLastMonth],
        if (Now()-[stopTime] + $(vReloadTimeDiffFromGMT)<=7,'yes','no') as [isLastWeek],
        //max(stopTime)-min(stopTime) as dataTimeSpan,
        Timestamp(Timestamp([scheduledStartTime]) + $(vReloadTimeDiffFromGMT)) as [run_scheduledStartTime],
        Timestamp(Timestamp([createdAt]) + $(vReloadTimeDiffFromGMT)) as run_createdAt,
        Timestamp(Timestamp([updatedAt]) + $(vReloadTimeDiffFromGMT)) as run_updatedAt,
        [__FK_data] AS [__KEY_root]
    RESIDENT RestConnectorMasterTable
    WHERE NOT IsNull([__FK_data]);
    DROP TABLE RestConnectorMasterTable;
    Drop Field [__KEY_root];
    let i = ;
    
    LOAD
    *
    FROM [$(vu_qvd_storage_connection)/AutomationRuns.qvd] (qvd);  
    
    STORE AutomationRuns into [$(vu_qvd_storage_connection)/AutomationRuns.qvd] (qvd);    
ENDIF
///$tab Exit
Let vDataLastReloaded =ConvertToLocalTime(Now(1),'$(vReloadDiffFromGMTString)');

exit script;